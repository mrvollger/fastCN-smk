import os
import sys
import math
from snakemake.utils import min_version
import pandas as pd

min_version("8.0")

SDIR = os.path.realpath(os.path.dirname(workflow.source_path("Snakefile")))
print(SDIR, file=sys.stderr)

shell.prefix(
    #f"export PATH=$PWD/fastCN:$PATH; module load gcc/10.2.0 libevent/2.1.8 tmux/2.8 samtools/1.13; set -eo pipefail;"
    f"export PATH=$PWD/fastCN:$PATH; set -eo pipefail;"
)


samples_df = pd.read_csv(config["manifest"], sep="\t")
samples = samples_df["sample"].tolist()
reads = samples_df["reads"].tolist()
config["reads"] = dict(zip(samples, reads))
SAT_BED = config.get("sat_bed", "")
CEN_BED = config.get("cen_bed", "")
GAP_BED = config.get("gap_bed", "")


fai_df = pd.read_csv(
    f'{config["fasta"]}.fai',
    sep="\t",
    header=None,
    names=["chr", "length", "offset", "bases", "bytes"],
)
num_contigs_in_ref = fai_df.shape[0]


wildcard_constraints:
    sm="|".join(config["reads"].keys()),


scattergather:
    split=config.get("nchunks", 10),


include: "rules/reference.smk"
include: "rules/mapping.smk"
include: "rules/cn-calling.smk"
include: "rules/quickmer.smk"
include: "rules/trackhub.smk"


rule all:
    input:
        expand(
            rules.make_trackdb.output,
            sample=config["reference"],
            type=config.get("type", ["sunk", "wssd"]),
        ),
        expand(
            rules.make_bb.output,
            sample=config["reference"],
            sm=config["reads"].keys(),
            type=config.get("type", ["sunk", "wssd"]),
        ),


rule make_ref:
    input:
        expand(
            rules.fastcn_GC_bin.output.bin,
            sample=config["reference"],
        ),
        expand(
            rules.masked_reference.output.fasta,
            sample=config["reference"],
        ),
        expand(
            rules.masked_reference.output.fai,
            sample=config["reference"],
        ),
        expand(
            rules.make_windows.output.bed,
            sample=config["reference"],
        ),
        expand(
            rules.autosome_control_windows.output.bed,
            sample=config["reference"],
        ),
        expand(
            rules.chrX_control_windows.output.bed,
            sample=config["reference"],
        ),


rule wssd_track:
    input:
        expand(
            rules.make_trackdb.output,
            sample=config["reference"],
            type="wssd",
        ),
